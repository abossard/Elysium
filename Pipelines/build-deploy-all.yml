trigger:
- main

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: '217940c9-14ba-45ce-9481-1d5ec26d7c35'
  containerRegistry: 'containerdemos.azurecr.io'
  tag: '$(Build.BuildId)'
  # Dockerfiles to build
  buildJob: 'false'
  buildWebApi: 'false'
  buildWebApp: 'false'
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Detect
  displayName: Detect code changes
  jobs:
  - job: Detect
    pool: 
      vmImage: $(vmImageName)
    steps:
    - pwsh: |
        $files=$(git diff HEAD HEAD~ --name-only)
        Write-Output $files
        foreach($f in $files) {
          switch -regex ($f) {
            "Elysium.Job.Host/" {
              Write-Host "##vso[task.setvariable variable=buildJob;isOutput=true]$true"
            }
            "Elysium.WebApiHost/" {
              Write-Host "##vso[task.setvariable variable=buildWebApi;isOutput=true]$true"
            }
            "Elysium.WebAppHost/" {
              Write-Host "##vso[task.setvariable variable=buildWebApp;isOutput=true]$true"
            }
          }
        }
      name: getChanges
      displayName: Get changed files
    - pwsh: |
        write-Output "BuildJob: $(buildJob)"
        write-Output "BuildWebApi: $(buildWebApi)"
        write-Output "BuildWebApp: $(buildWebApp)"
      displayName: Dockerfiles to build
- stage: BuildImages
  displayName: Build and push Container Images
  jobs:
  - job: Build
    variables:
    - name: buildJob
      value: $[ stageDependencies.Detect.Detect.outputs['getChanges.buildJob'] ]
    - name: buildWebApp
      value: $[ stageDependencies.Detect.Detect.outputs['getChanges.buildWebApi'] ]
    - name: buildWebApi
      value: $[ stageDependencies.Detect.Detect.outputs['getChanges.buildWebApp'] ]
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      condition: eq(variables.buildJob, 'true')
      displayName: Build and push the Job image to container registry
      inputs:
        command: buildAndPush
        repository: Job
        dockerfile: Job.Dockerfile
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: Docker@2
      condition: eq(variables.buildWebApi, 'true')
      displayName: Build and push the WebApi image to container registry
      inputs:
        command: buildAndPush
        repository: WebApi
        dockerfile: WebApi.Dockerfile
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: Docker@2
      condition: eq(variables.buildWebApp, 'true')
      displayName: Build and push the WebApp image to container registry
      inputs:
        command: buildAndPush
        repository: WebApp
        dockerfile: WebApp.Dockerfile
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
