parameters:
- name: forceBuild
  displayName: Force Builds?
  default: false
  type: boolean

trigger:
  batch: false
  branches:
    include:
    - main
    - features/*
  paths:
    exclude:
    - README.md
    - Elysium.sln
    - charts/Elysium/values.yaml

pr: 
  branches:
    include:
    - main
    - releases/*
    exclude:
    - releases/old*
  drafts: false

pool:
  vmImage: ubuntu-latest

variables:
- name: tag
  value: $(Build.BuildNumber)
- name: helmValuesFile
  value: charts/Elysium/values.yaml
- name: acr
  value: anbossar
- name: repository
  value: anbossar.azurecr.io/elysium/job
- name: PullRequest
  value: eq(variables['Build.Reason'], 'PullRequest')
- name: sourceBranch
  value: $[replace(coalesce(variables['System.PullRequest.SourceBranch'], variables['Build.SourceBranch']), 'refs/heads/', '')]
- name: appVersion
  value: "1.0.0-beta"
- name: chartVersion
  value: 0.1.1

stages:
- stage: Changes
  displayName: Has Changes
  jobs:
  - job: Changes
    displayName: Get Changed Folders
    dependsOn: []
    steps:
    - bash: |
        COMMIT_IDS=`curl -H 'Authorization: Bearer ${SYSTEM_ACCESSTOKEN}' ${COLLECTION_URI}${PROJECT}/_apis/build/builds/${BUILD_ID}/changes?api-version=6.0 | jq '.value[].id' | tr ' ' '\n'`
        echo ${COMMIT_IDS} | tr ' ' '\n'
        CHANGED_FILES=`echo $COMMIT_IDS | xargs -L 1 git log -m -1 --name-only --pretty=format:| tr '\n' '|'`
        echo ${CHANGED_FILES}
        echo " ##vso[task.setvariable variable=Changes;isOutput=true]${CHANGED_FILES}"
      name: Changes
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)
        COLLECTION_URI: $(System.CollectionUri)
        PROJECT: $(System.TeamProject)
        BUILD_ID: $(Build.BuildId)
- stage: BuildingAndTesting
  displayName: Building and Testing
  variables:
  - name: Changes
    value: $[ stageDependencies.Changes.Changes.outputs['Changes.Changes'] ]
  dependsOn:
  - Changes
  jobs:
  - job: Build_JobHost
    displayName: Build Job Build_Job
    dependsOn: []
    condition: or(contains(variables.Changes, 'Job.'), ${{ parameters.forceBuild }})
    steps:
    - checkout: self
      persistCredentials: true
      clean: true
    - task: AzureCLI@2
      inputs:
        azureSubscription: 'anbossar-training-subscription(8b25cfae-660b-4066-9ce5-0858e9ab3eac)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az acr login -n anbossar
    - bash: |
        docker buildx build --platform linux/amd64 -f Job.Dockerfile -t $REPOSITORY:latest -t $REPOSITORY:$TAG_NAME --push .
      workingDirectory: src
      env:
        TAG_NAME: $(tag)
        REPOSITORY: $(repository)
    - bash: |
        git config --global user.email "pipeline@azure.com"
        git config --global user.name "Azure Pipeline"
        sed -i "s/^$PARAMETER_NAME:.*/$PARAMETER_NAME: \"$TAG\"/" $HELM_VALUES_FILE
        git add $HELM_VALUES_FILE
        GIT_MESSAGE="Update $HELM_VALUES_FILE with tag $TAG for $PARAMETER_NAME"
        echo $GIT_MESSAGE
        git commit -m "$GIT_MESSAGE"
        git push origin HEAD:$SOURCE_BRANCH
      env:
        TAG: $(tag)
        PARAMETER_NAME: job_image_tag
        HELM_VALUES_FILE: $(helmValuesFile)
        SOURCE_BRANCH: $(sourceBranch)
  - job: Build_WebApiHost
    condition: or(contains(variables['Changes'], 'WebApi.'), contains(variables['Changes'], 'Library'), ${{ parameters.forceBuild }})
    displayName: Build Web Api Build_Job
    dependsOn: []
    steps:
    - script: echo Hello, world!
  - job: Build_WebAppHost
    condition: contains(variables['Changes'], 'WebApp.')
    displayName: Build Web App Build_Job
    dependsOn: []
    steps:
    - script: echo Hello, world!

- stage: UpdateHelmChartVersion
  displayName: Update the Helm Chart Version
  variables:
  - name: Changes
    value: $[ stageDependencies.Changes.Changes.outputs['Changes.Changes'] ]
  dependsOn:
  - Changes
  jobs:
  - job: UpdateHelmChartVersion
    condition: or(contains(variables['Changes'], 'src/'), contains(variables['Changes'], 'charts/'), ${{ parameters.forceBuild }})
    steps:
    - bash: |
        helm version
        export HELM_EXPERIMENTAL_OCI=1
        helm package charts/elysium --version $CHART_VERSION --app-version $"APP_VERSION" --debug
        USER_NAME="00000000-0000-0000-0000-000000000000"
        PASSWORD=$(az acr login --name $ACR --expose-token --output tsv --query accessToken)
        helm registry login $ACR.azurecr.io --username $USER_NAME --password $PASSWORD
        helm push elysium*.tgz oci://$ACR.azurecr.io/helm
      env:
        ACR_NAME: $(repository)
        APP_VERSION: $(appVersion)
        CHART_VERSION: $(chartVersion)
        ACR: $(acr)
